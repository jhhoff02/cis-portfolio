
--18
SELECT *
FROM ITEM
WHERE CATEGORY = 'GME'
ORDER BY PRICE

--using ALL
SELECT * FROM ITEM
WHERE PRICE > ALL (SELECT PRICE FROM ITEM WHERE CATEGORY = 'GME')

--using MAX
SELECT * FROM ITEM
WHERE PRICE > (SELECT MAX(PRICE) FROM ITEM WHERE CATEGORY = 'GME')

--cannot do it without nested query. WHERE applies condition to each row. MAX is not defined for each row.
SELECT * FROM ITEM
WHERE PRICE > MAX(PRICE) 

--19
SELECT *
FROM ITEM
WHERE ITEM_NUM NOT IN (SELECT ITEM_NUM FROM ORDER_LINE)

--won't include non-ordered items
SELECT L.ORDER_NUM, L.ORDER_DATE, I.ITEM_NUM, I.DESCRIPTION
FROM ORDER_LINE L INNER JOIN ITEM I ON L.ITEM_NUM = I.ITEM_NUM
ORDER BY L.ORDER_NUM, L.ORDER_DATE, I.ITEM_NUM, I.DESCRIPTION

--solve with RIGHT OUTER JOIN
SELECT L.ORDER_NUM, L.ORDER_DATE, I.ITEM_NUM, I.DESCRIPTION
FROM ORDER_LINE L RIGHT OUTER JOIN ITEM I ON L.ITEM_NUM = I.ITEM_NUM
ORDER BY L.ORDER_NUM, L.ORDER_DATE, I.ITEM_NUM, I.DESCRIPTION

--solve with RIGHT OUTER JOIN
SELECT L.ORDER_NUM, L.ORDER_DATE, I.ITEM_NUM, I.DESCRIPTION
FROM ITEM I LEFT OUTER JOIN ORDER_LINE L ON L.ITEM_NUM = I.ITEM_NUM
ORDER BY L.ORDER_NUM, L.ORDER_DATE, I.ITEM_NUM, I.DESCRIPTION

--20
--list all items whose price is greater than any price in the game category
--must use nested query. it finds the min price and uses that as condition
SELECT *
FROM ITEM
WHERE PRICE > (SELECT MIN(PRICE) FROM ITEM)

--21
SELECT *
FROM REP R LEFT OUTER JOIN CUSTOMER C ON R.REP_NUM = C.REP_NUM

SELECT *
FROM CUSTOMER C RIGHT OUTER JOIN REP R ON R.REP_NUM = C.REP_NUM

--LIST ALL REPS WITHOUT A CUSTOMER USING AN OUTER JOIN
SELECT *
FROM CUSTOMER C RIGHT OUTER JOIN REP R ON R.REP_NUM = C.REP_NUM
WHERE C.CUSTOMER_NUM IS NULL

--CREATE VIEW
CREATE VIEW REPWITHNOCUSTOMER AS
SELECT R.REP_NUM, R.LAST_NAME
FROM CUSTOMER C RIGHT OUTER JOIN REP R ON R.REP_NUM = C.REP_NUM
WHERE C.CUSTOMER_NUM IS NULL

SELECT *
FROM REPWITHNOCUSTOMER